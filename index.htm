<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>LINE 打卡系統</title>
    <script>
        const TK_HEX = '6768705F4A3052654D6C75636C6B614B785A63494C4379316C5077754458486C5150313955304361';
        const GIST_ID = '7c94f03f1def80b2e4236a199f257c63';
        const GIST_FILE_NAME = 'checkin.txt';
        const TK = hexToString(TK_HEX);
	const ALLOWED_LOCATIONS = [
	  { name: "台北公司", lat: 24.986794380363925, lon: 121.5336918999006, radiusM: 200 },
	  { name: "台中辦公室", lat: 24.310777911896015, lon: 120.72138183688088, radiusM: 2000 },
	  { name: "后里美光", lat: 24.318140260826873, lon: 120.72406839843525, radiusM: 2000 },
	];
	
	// 計算兩點間距離（Haversine 公式，回傳公尺）
	function distance(lat1, lon1, lat2, lon2) {
	  const R = 6371e3; // 地球半徑 (公尺)
	  const toRad = deg => deg * Math.PI / 180;
	
	  const dLat = toRad(lat2 - lat1);
	  const dLon = toRad(lon2 - lon1);
	  const lat1Rad = toRad(lat1);
	  const lat2Rad = toRad(lat2);
	
	  const a = Math.sin(dLat / 2) ** 2 +
	            Math.cos(lat1Rad) * Math.cos(lat2Rad) *
	            Math.sin(dLon / 2) ** 2;
	  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
	  return R * c; // 公尺
	}
	
	// 判斷是否在允許地點的允許距離內
	function isWithinAllowedArea(lat, lon) {
	  for (const loc of ALLOWED_LOCATIONS) {
	    const d = distance(lat, lon, loc.lat, loc.lon);
	    if (d <= loc.radiusM) {
	      return `${loc.name} ${Math.round(d)} 公尺`;
	    }
	  }
	  return null; // ❌ 不在任何允許地點範圍內
	}

        function hexToString(hex) {
            let str = '';
            for (let i = 0; i < hex.length; i += 2)
                str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
            return str;
        }

	function isLine() {
	    return /Line/i.test(navigator.userAgent);
	}
	
	function isAndroid() {
	    return /Android/i.test(navigator.userAgent);
	}
	
	function openExternalBrowserAndroid(url) {
	    // 嘗試透過 Intent 開啟外部瀏覽器（Chrome 為例）
	    location.href = `intent://${url.replace(/^https?:\/\//, '')}#Intent;scheme=https;package=com.android.chrome;end`;
	}
	
	function checkEntry() {
	    if (!isLine() && !isAndroid()) {
	        document.body.innerHTML = "<p style='color:red;'>請由 LINE 開啟本頁面</p>";
	        return;
	    }
	
	    if (isAndroid() && isLine()) {
		 document.body.innerHTML = `
	          <div style="text-align:center; padding:40px; font-size:18px;">
	            <p>📍本打卡系統需使用 GPS<br>請點擊下方按鈕，改用手機瀏覽器開啟</p>
	            <a href="javascript:openExternalBrowserAndroid('https://ambercoltd.github.io/CheckIn');"
	               style="display:inline-block; margin-top:20px; padding:12px 24px; background:#007AFF; color:white; text-decoration:none; border-radius:8px;">
	              👉 Android請點這開啟
	            </a>
	          </div>
	        `;
	    }else{
	        fetchLocation(); // 你的定位流程
	    }
	}

        function fetchLocation() {
            if (!navigator.geolocation) {
                document.getElementById("locationStatus").innerText = "瀏覽器不支援地理位置功能。";
                return;
            }

            navigator.geolocation.getCurrentPosition(async position => {
		    const { latitude: lat, longitude: lon } = position.coords;
		    localStorage.setItem('latitude', lat);
		    localStorage.setItem('longitude', lon);
		
		    let where = isWithinAllowedArea(lat, lon);
		
		    if (where == null) {
		        try {
		            let res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
		            let data = await res.json();
		            where = data.display_name || "無法取得地址";
		        } catch (e) {
		            where = "地址取得失敗，請稍後重試。";
		        }
		    }
		
		    localStorage.setItem('address', where);
		    document.getElementById("locationStatus").innerText = where;
		
		    await sendLocation();
		}, error => {
		    document.getElementById("locationStatus").innerText = "無法獲取位置：" + error.message;
		});

        }

        function askForTel() {
            let tel = localStorage.getItem('tel');
            if (!tel || !/^\d{10}$/.test(tel)) {
                tel = prompt("請輸入您的10碼電話號碼：");
                if (tel && /^\d{10}$/.test(tel)) {
                    localStorage.setItem('tel', tel);
                } else {
                    alert("輸入的電話格式錯誤。");
                    return null;
                }
            }
            return tel;
        }

        async function sendLocation() {
		
            const tel = askForTel();
            if (!tel) return;

            const address = localStorage.getItem('address');

            if (!address) {
                alert("尚未獲取位置資訊，請稍候再試。");
                return;
            }

            await updateGist(tel, address);
        }

        async function updateGist(tel, address) {
            const now = new Date();
            const formattedTime = `${now.getFullYear()}/${(now.getMonth() + 1).toString().padStart(2, '0')}/${now.getDate().toString().padStart(2, '0')} ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
            const newContent = `050\t${formattedTime}\t${tel}\t${address}\r\n`;
        
            try {
                let res = await fetch(`https://api.github.com/gists/${GIST_ID}?timestamp=${Date.now()}`);
                let gistData = await res.json();
        
                let existingContent = gistData.files[GIST_FILE_NAME]?.content || '';
                let lines = existingContent.split('\n').filter(line => line.trim() !== '');
        
                // 計算時間範圍（30 天）
                const oneMonthAgo = new Date();
                oneMonthAgo.setDate(oneMonthAgo.getDate() - 30);
        
                // 過濾出最近 6 個月內的紀錄（存入 Gist）
                let updatedLines = lines.filter(line => {
                    const parts = line.split('\t');
                    return parts.length > 1 && Date.parse(parts[1]) > Date.now() - 15552000000;
                }).map(line => line.trim()); // 在這裡對每一行做 trim()
        
                // 過濾出最近 1 個月內相同 tel 的紀錄（顯示在 logRecords）
                let recentRecords = updatedLines.filter(line => {
                    const parts = line.split('\t');
                    return parts.length > 2 && parts[2] === tel && Date.parse(parts[1]) >= oneMonthAgo;
                });
        
                // 插入新紀錄到 Gist
                updatedLines.unshift(newContent.trim());
        
                await fetch(`https://api.github.com/gists/${GIST_ID}`, {
                    method: 'PATCH',
                    headers: { 'Authorization': `token ${TK}`, 'Content-Type': 'application/json' },
                    body: JSON.stringify({ files: { [GIST_FILE_NAME]: { content: updatedLines.join('\r\n') } } })
                });
        
                document.getElementById("status").innerText = "打卡成功！";
                document.getElementById("logRecords").innerText = newContent + recentRecords.join('\r\n'); // 只顯示最近 1 個月的記錄
            } catch (error) {
                alert("打卡失敗：" + error);
            }
        }


        function clearTel() {
            const pwd = prompt("請輸入密碼以清除電話號碼：");
            if (pwd === '20938096') {
                localStorage.removeItem('tel');
                document.getElementById("telStatus").innerText = "電話號碼已清除，請重新輸入。";
            } else {
                alert("密碼錯誤，無法清除。");
            }
        }

        window.onload = checkEntry;
    </script>
</head>
<body>
    <p id="status"></p>
    <p id="locationStatus">位置獲取中...</p>
    <button onclick="clearTel()">換電話</button>
    <p id="telStatus"></p>
    <pre id="logRecords"></pre>
</body>
</html>
